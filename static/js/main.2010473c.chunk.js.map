{"version":3,"sources":["redux/contacts/contactsActions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Header/Header.js","components/Logo/logo.svg","components/Logo/Logo.js","components/App.js","redux/contacts/contactsReducer.js","redux/stroe.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["actions","addContact","createAction","text","payload","contact","id","uuidv4","removeContact","changeFilter","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","className","styles","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","placeholder","autoComplete","autoFocus","onChange","TaskEditor_button","Component","mapDispatchToProps","contactsActions","connect","onRemoveContact","contactsItems","normalizedFilter","filter","toLowerCase","contacts","item","includes","TransitionGroup","component","map","CSSTransition","timeout","classNames","onClick","onChangeFilter","Header","Logo","src","logo","alt","App","in","appear","unmountOnExit","stage","createReducer","combineReducers","store","configureStore","reducer","contactReducer","ReactDom","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.2010473c.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst addContact = createAction('contact/add', text => ({\r\n    payload: {\r\n        contact: {\r\n            text,\r\n            id: uuidv4()\r\n        },\r\n    },\r\n}));\r\n\r\n// const removeContact = createAction('contact/remove', contactId => ({\r\n//     payload: {\r\n//         contactId\r\n//     },\r\n// }));\r\n\r\n//   или\r\n\r\nconst removeContact = createAction('contact/remove');\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\nconst actions = {\r\n    addContact,\r\n    removeContact,\r\n    changeFilter\r\n};\r\n\r\nexport default actions;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        onAddContact: PropTypes.func.isRequired\r\n    };\r\n    \r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.onAddContact({ ...this.state });\r\n\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n  \r\n    render() {\r\n        return (\r\n            <form\r\n                className={styles.TaskEditor}\r\n                onSubmit={this.handleSubmit}>\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Name\r\n                        <input\r\n                            className={styles.TaskEditor_input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Your name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus=\"on\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                </label>\r\n\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Number\r\n                    <input\r\n                        className={styles.TaskEditor_input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        placeholder=\"Your number\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button\r\n                    className={styles.TaskEditor_button}\r\n                    type=\"submit\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onAddContact: contactsActions.addContact\r\n};\r\n// или так mapDispatchToProps\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAddContact: text => dispatch(contactsActions.addContact(text))\r\n//     }\r\n// };\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './ContactList.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions'\r\n\r\n// function ContactList({ contacts, onRemoveContact }) {\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n    <TransitionGroup\r\n        component=\"ul\"\r\n        className=\"TaskList\">\r\n            \r\n        {contacts.map(({id, text}) => (\r\n            <CSSTransition\r\n                key={id}\r\n                timeout={250}\r\n                classNames=\"ContactListAppear\"\r\n                // unmountOnExit\r\n            >\r\n                <li\r\n                    className=\"TaskList_item\"\r\n                    /*key={contact.id}*/>\r\n                    {text.name}: {text.number}\r\n                    {\r\n                        <button\r\n                            className=\"TaskList_button\"\r\n                            type=\"button\"\r\n                            name=\"delete\"\r\n                            onClick={() => onRemoveContact(id)}\r\n                        >\r\n                            x\r\n                        </button>\r\n                    }\r\n                </li>\r\n            </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n);\r\n    \r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n            name: PropTypes.string,\r\n            number: PropTypes.string,\r\n        })),\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    const { contactsItems, filter } = state.contact;\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const visibleConacts = contactsItems.filter(item =>\r\n        item.text.name.toLowerCase().includes(normalizedFilter))\r\n    \r\n    return {\r\n        contacts: visibleConacts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onRemoveContact: contactsActions.removeContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './Filter.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\n\r\n// function Filter({ value, onChangeFilter }) {\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <div className=\"Filter\">\r\n        <h2 className=\"FilterName\">Find contacts by name</h2>\r\n        <input className=\"FilterInput\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            value={value}\r\n            onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: state.contact.filter\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onChangeFilter: contactsActions.changeFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1 className=\"HeaderName\">Phonebook</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './Logo.css';\r\n\r\nfunction Logo() {\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //   </header>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default Logo;","import React  from \"react\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport Header from './Header/Header';\r\nimport Logo from './Logo/Logo';\r\n// import ShowModalWarning from './ShowModal/ShowModalWarning';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"Wrapper\">\r\n\r\n            <CSSTransition\r\n                in={true}\r\n                appear={true}\r\n                timeout={500}\r\n                classNames=\"HeaderAppear\"\r\n                unmountOnExit\r\n            >\r\n            {stage => {\r\n                // console.log(stage);\r\n                return (\r\n                    <div className=\"Header\">\r\n                        <Header />\r\n                        <CSSTransition\r\n                            in={stage === 'entered'}\r\n                            timeout={500}\r\n                            classNames=\"LogoAppear\"\r\n                            unmountOnExit\r\n                        >\r\n                            <Logo />\r\n                        </CSSTransition>\r\n                    </div>\r\n                )\r\n            }}\r\n            </CSSTransition>\r\n                <ContactForm\r\n            />\r\n\r\n            {/* <CSSTransition\r\n                in={contacts.length > 1}\r\n                timeout={250}\r\n                classNames=\"FilterAppear\"\r\n                unmountOnExit\r\n            > */}\r\n                    <Filter/>\r\n            {/* </CSSTransition> */}\r\n                \r\n            {/* <CSSTransition\r\n                in={contacts.length > 0}\r\n                timeout={250}\r\n                classNames=\"ContactsAppear\"\r\n                unmountOnExit\r\n            > */}\r\n                <h2 className=\"ContactsName\">\r\n                    Contacts\r\n                </h2>\r\n            {/* </CSSTransition> */}\r\n                \r\n            {/* <CSSTransition\r\n                in={visibleContacts.length > 0}\r\n                timeout={250}\r\n                classNames=\"ContactListApp\"\r\n                // unmountOnExit\r\n            > */}\r\n                <ContactList/>\r\n            {/* </CSSTransition> */}\r\n\r\n            {/* <CSSTransition\r\n                in={modalWarning}\r\n                timeout={250}\r\n                classNames=\"ShowModalAppear\"\r\n                unmountOnExit\r\n            >\r\n                <ShowModalWarning />\r\n            </CSSTransition> */}\r\n               \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst onAddContact = (state, actions) => {\r\n    return [...state, actions.payload.contact]\r\n};\r\nconst onRemoveContact = (state, actions) => {\r\n    return state.filter(contact => contact.id !== actions.payload)\r\n};\r\nconst onAddFilter = (state, actions) => actions.payload;\r\n\r\nconst contactsItems = createReducer([], {\r\n    [contactsActions.addContact]: onAddContact,\r\n    [contactsActions.removeContact]: onRemoveContact\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [contactsActions.changeFilter]: onAddFilter\r\n});\r\n\r\nexport default combineReducers({\r\n    contactsItems,\r\n    filter\r\n});","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactReducer from './contacts/contactsReducer';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contact: contactReducer\r\n    },\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/stroe';\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.querySelector('#root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__26-i2\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__2kaG_\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__3iSFO\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__22gbe\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__36UqI\"};"],"sourceRoot":""}